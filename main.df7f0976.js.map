{"version":3,"sources":["scripts/main.js"],"names":["initialBoard","gameField","document","querySelector","start","rowsQuantity","rows","length","cellsQuantity","cells","messageLose","messageWin","messageStart","scoreField","isWin","score","setUpBoard","innerText","i","j","classList","value","add","resetCell","cell","number","checkIfEmpty","checkIfSlide","getRandomCell","min","isZeroFound","x","Math","floor","random","y","max","updateBoard","createNewRow","row","newRow","filter","r","push","includes","goLeft","goRight","reverse","goUp","column","k","goDown","handleStartGame","addEventListener","e","replace","remove","handleKeyControl","key"],"mappings":"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","file":"main.df7f0976.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst gameField = document.querySelector('tbody');\nconst start = document.querySelector('.button');\nconst rowsQuantity = gameField.rows.length;\nconst cellsQuantity = gameField.rows[0].cells.length;\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\nconst scoreField = document.querySelector('.game-score');\nlet isWin = false;\nlet score = 0;\nlet initialBoard;\n\nfunction setUpBoard() {\n  initialBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  scoreField.innerText = score;\n\n  for (let i = 0; i < rowsQuantity; i++) {\n    for (let j = 0; j < cellsQuantity; j++) {\n      gameField.rows[i].cells[j].innerText\n        = initialBoard[i][j] ? initialBoard[i][j] : '';\n      gameField.rows[i].cells[j].classList.value = '';\n      gameField.rows[i].cells[j].classList.add('field-cell');\n    }\n  }\n}\n\nfunction resetCell(cell, number) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (number > 0) {\n    cell.innerText = number;\n    cell.classList.add(`field-cell--${number}`);\n  }\n}\n\nfunction checkIfEmpty() {\n  for (let i = 0; i < rowsQuantity; i++) {\n    for (let j = 0; j < cellsQuantity; j++) {\n      if (initialBoard[i][j] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction checkIfSlide() {\n  for (let i = 0; i < rowsQuantity; i++) {\n    for (let j = 0; j < cellsQuantity - 1; j++) {\n      if (initialBoard[i][j] === initialBoard[i][j + 1]\n        || initialBoard[j][i] === initialBoard[j + 1][i]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction getRandomCell() {\n  if (!checkIfEmpty()) {\n    return;\n  }\n\n  const min = 2;\n  const max = 4;\n  const interval = 2;\n  let isZeroFound = false;\n\n  while (!isZeroFound) {\n    const x = Math.floor(Math.random() * 4);\n    const y = Math.floor(Math.random() * 4);\n    const number = Math.floor(Math.random()\n      * (max - min + interval) / interval) * interval + min;\n\n    if (initialBoard[x][y] === 0) {\n      initialBoard[x][y] = number;\n      resetCell(gameField.rows[x].cells[y], number);\n      isZeroFound = true;\n\n      return;\n    }\n  }\n}\n\nfunction updateBoard() {\n  for (let i = 0; i < rowsQuantity; i++) {\n    for (let j = 0; j < cellsQuantity; j++) {\n      const gameCell = gameField.rows[i].cells[j];\n      const number = initialBoard[i][j];\n\n      resetCell(gameCell, number);\n    }\n  }\n}\n\nfunction createNewRow(row) {\n  let newRow = row.filter(r => r !== 0);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  scoreField.innerText = score;\n  newRow = newRow.filter(r => r !== 0);\n\n  while (newRow.length < rowsQuantity) {\n    newRow.push(0);\n  }\n\n  isWin = newRow.includes(2048);\n\n  return newRow;\n}\n\nfunction goLeft() {\n  for (let i = 0; i < rowsQuantity; i++) {\n    let row = initialBoard[i];\n\n    row = createNewRow(row);\n    initialBoard[i] = row;\n  }\n  updateBoard();\n}\n\nfunction goRight() {\n  for (let i = 0; i < rowsQuantity; i++) {\n    let row = initialBoard[i];\n\n    row.reverse();\n    row = createNewRow(row);\n    row.reverse();\n    initialBoard[i] = row;\n  }\n  updateBoard();\n}\n\nfunction goUp() {\n  for (let j = 0; j < cellsQuantity; j++) {\n    let column = [];\n\n    for (let i = 0; i < rowsQuantity; i++) {\n      column.push(initialBoard[i][j]);\n    }\n    column = createNewRow(column);\n\n    for (let k = 0; k < cellsQuantity; k++) {\n      initialBoard[k][j] = column[k];\n    }\n  }\n  updateBoard();\n}\n\nfunction goDown() {\n  for (let j = 0; j < cellsQuantity; j++) {\n    let column = [];\n\n    for (let i = 0; i < rowsQuantity; i++) {\n      column.push(initialBoard[i][j]);\n    }\n    column.reverse();\n    column = createNewRow(column);\n    column.reverse();\n\n    for (let k = 0; k < cellsQuantity; k++) {\n      initialBoard[k][j] = column[k];\n    }\n  }\n  updateBoard();\n}\n\nfunction handleStartGame() {\n  start.addEventListener('click', e => {\n    if (start.innerText === 'Start') {\n      isWin = false;\n      score = 0;\n      start.innerText = 'Restart';\n      start.classList.replace('start', 'restart');\n      messageStart.classList.add('hidden');\n      messageWin.classList.add('hidden');\n      messageStart.classList.add('hidden');\n      messageLose.classList.add('hidden');\n      setUpBoard();\n      getRandomCell();\n      getRandomCell();\n    } else {\n      start.innerText = 'Start';\n      start.classList.replace('restart', 'start');\n      messageStart.classList.remove('hidden');\n      setUpBoard();\n    }\n  });\n}\n\nfunction handleKeyControl() {\n  document.addEventListener('keyup', e => {\n    switch (e.key) {\n      case 'ArrowLeft':\n        goLeft();\n        getRandomCell();\n        break;\n      case 'ArrowRight':\n        goRight();\n        getRandomCell();\n        break;\n      case 'ArrowUp':\n        goUp();\n        getRandomCell();\n        break;\n      case 'ArrowDown':\n        goDown();\n        getRandomCell();\n        break;\n      default:\n        break;\n    }\n\n    if (isWin) {\n      messageWin.classList.remove('hidden');\n      start.innerText = 'Start';\n      start.classList.replace('restart', 'start');\n    }\n\n    if (!checkIfEmpty() && !checkIfSlide()) {\n      messageLose.classList.remove('hidden');\n      start.innerText = 'Start';\n      start.classList.replace('restart', 'start');\n    }\n  });\n}\n\nhandleStartGame();\nhandleKeyControl();\n"]}